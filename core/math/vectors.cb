import core.math.math

struct Vector2D {
    x: float
    y: float
}

impl Serializable for Vector2D {
    function to_string(): string => "(" + x + ", " + y + ")"
}

struct Vector3D {
    x: float
    y: float
    z: float
}

function add(v1: Vector2D, v2: Vector2D): Vector2D => Vector2D(v1.x + v2.x, v1.y + v2.y)
function sub(v1: Vector2D, v2: Vector2D): Vector2D => Vector2D(v1.x - v2.x, v1.y - v2.y)
function dot(v1: Vector2D, v2: Vector2D): float => v1.x * v2.x + v1.y * v2.y
function mag(v: Vector2D): float => sqrt(v.x * v.x + v.y * v.y)

function add(v1: Vector3D, v2: Vector3D): Vector3D => Vector3D(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z)
function sub(v1: Vector3D, v2: Vector3D): Vector3D => Vector3D(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z)
function dot(v1: Vector3D, v2: Vector3D): float => v1.x * v2.x + v1.y * v2.y + v1.z * v2.z
function mag(v: Vector3D): float => sqrt(v.x * v.x + v.y * v.y + v.z * v.z)
